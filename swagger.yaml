openapi: '3.0.0'
info:
  description: |
    # Introduction
    This is a sample server Petstore server.  You can find out more about

    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"

  contact:
    email: "apiteam@swagger.io"
    url: 'url'
    name: "API Support"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
- url: 'https://development.gigantic-server.com/v1'
  description: 'Development server'
- url: 'https://development.gigantic-server.com/v1'
  description: 'Development server'
tags:
- name: "pet"
  description: "Everything about your Pets"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
paths:
  /pets:
    get:
      description: |
        Returns all pets from the system that the user has access to
        Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.
        Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
      operationId: findPets
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new pet in the store. Duplicates are allowed
      operationId: addPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pet:
    post:
      tags: ["pet"]
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addOneNewPet"
      requestBody:
        description: "Pet object that needs to be added to the store"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        "405":
          description: "Invalid input"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                  type:
                    type: string
                  status:
                    type: number
      security:
        - api_key: []
    put:
      tags: ["pet"]
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      requestBody:
        required: true
        description: "Pet object that needs to be added to the store"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        "400":
          description: "Invalid ID supplied"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  msg:
                    type: string
                  status:
                    type: number
                example:
                  error: Input validation error
                  msg: Wrong input
                  status: 400
        "404":
          description: "Pet not found"
        "405":
          description: "Validation exception"
        500:
          description: Internal server error

      security:
        - bearerAuth: []
  /pet/findByStatus:
    get:
      tags: ["pet"]
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        schema:
          type: array
          items:
            type: string
            enum:
            - available
            - pending
            - sold
            default: available
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: "Invalid status value"
      security:
      - bearerAuth: []
  /pet/findByTags:
    get:
      tags: ["pet"]
      summary: "Finds Pets by tags"
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: "Invalid tag value"
      security:
      - bearerAuth: []
      deprecated: true
  /pet/{petId}:
    get:
      tags: ["pet"]
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - api_key: []
    put:
      tags: ["pet"]
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        required: true
        description: data for a new pet
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                status:
                  type: string
              required:
                - name
      responses:
        "405":
          description: "Invalid input"
      security:
        - bearerAuth: []
    delete:
      tags: ["pet"]
      summary: "Deletes a pet"
      description: ""
      operationId: "deleteOnePet"
      parameters:
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - bearerAuth: []
  /store/inventory:
    get:
      tags: ["store"]
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                additionalProperties:
                  type: "integer"
                  format: "int32"
      security:
      - api_key: []
  /user:
    post:
      tags: ["user"]
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      requestBody:
        required: true
        description: data for a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: "successful operation"
components:
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "api_key"
      in: "header"
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Pet:
      allOf:
        - $ref: '#/components/schemas/NewPet'
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              format: int64

    NewPet:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        tag:
          type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Order:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        petId:
          type: "integer"
          format: "int64"
        quantity:
          type: "integer"
          format: "int32"
        shipDate:
          type: "string"
          format: "date-time"
        status:
          type: "string"
          description: "Order Status"
          enum:
          - "placed"
          - "approved"
          - "delivered"
        complete:
          type: "boolean"
          default: false
    Category:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        phone:
          type: "string"
        userStatus:
          type: "integer"
          format: "int32"
          description: "User Status"
    Tag:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
    PetTwo:
      type: "object"
      required:
      - "name"
      - "photoUrls"
      properties:
        id:
          type: "integer"
          format: "int64"
        category:
          $ref: "#/components/schemas/Category"
        name:
          type: "string"
          example: "doggie"
        photoUrls:
          type: "array"
          items:
            type: "string"
        tags:
          type: "array"
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: "string"
          description: "pet status in the store"
          enum:
          - "available"
          - "pending"
          - "sold"
    ApiResponse:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
